@startuml
!theme plain
skinparam classAttributeIconStyle public private
hide empty members

' ------------------------------
' Entidades de domínio
' ------------------------------
package "Entidades" {
    class Paciente {
        +nome: String
        +convenio: String
        +email: String
        +dataNascimento: LocalDate
        +telefone: String

    }

    class Medico {
        +nome: String
        +crm: String
    }

    enum TipoPrioridade { 
        URGENTE 
        POUCO_URGENTE 
        ROTINA 
    }
}

' ------------------------------
' Núcleo do domínio: Exame / Laudo
' ------------------------------
package "Domínio - Exame/Laudo" {
    abstract class Exame {
        +idExame: String
        +paciente: Paciente
        +medicoSolicitante: Medico
        +dataExame: Date
        +precoBase: double
        +prioridade: TipoPrioridade
        +getNumeroSequencial(): int
        +validar(): boolean
        +calcularPreco(): double
    }

    class ExameHemograma extends Exame
    class ExameUltrassonografia extends Exame
    class ExameRessonanciaMagnetica extends Exame

    class LaudoConcreto {
        -formato: FormatoLaudo
        +LaudoConcreto(formato: FormatoLaudo)
        +gerar(exame: Exame, conteudo: String): File
    }

    Exame "1" o-- "1" LaudoConcreto : gera
}

' ------------------------------
' Formatos / Bridge
' ------------------------------
package "Formatação (Bridge)" {
    interface FormatoLaudo {
        +gerar(exame: Exame, conteudo: String): File 
    }

    class FormatoTXT implements FormatoLaudo { 
        +gerar(...): File 
    }
    class FormatoHTML implements FormatoLaudo { 
        +gerar(...): File \n +embedLogo(pathOuBytes): String 
    }
    class FormatoPDF implements FormatoLaudo { 
        +gerar(...): File 
    }

    LaudoConcreto --> FormatoLaudo
}

' ------------------------------
' Validação (Chain of Responsibility)
' ------------------------------
package "Validação" {
    interface ValidadorLaboratorial { 
        +setProximo(v: ValidadorLaboratorial): void \n +handle(exame: Exame): String 
    }
    abstract class ValidadorBase implements ValidadorLaboratorial { 
        -proximo: ValidadorLaboratorial 
    }

    class ValidadorGlicose implements ValidadorLaboratorial
    class ValidadorCreatinina implements ValidadorLaboratorial
    class ValidadorHemograma implements ValidadorLaboratorial
}

' ------------------------------
' Fila e Prioridade (Strategy)
' ------------------------------
package "Fila / Prioridade" {
    class FilaPrioridade { 
        +adicionarExame(exame: Exame): void \n 
        +proximoExame(): Exame 
    }
    interface EstrategiaPrioridade { 
        +detreminarPrioridade(exame: Exame): int 
    }
    class EstrategiaPrioridadeUrgente implements EstrategiaPrioridade
    class EstrategiaPrioridadePoucoUrgente implements EstrategiaPrioridade
    class EstrategiaPrioridadeRotina implements EstrategiaPrioridade

    FilaPrioridade "1" o-- "1" EstrategiaPrioridade
}

' ------------------------------
' Pagamento (State)
' ------------------------------
package "Pagamento" {
    class ContextoPagamento { 
        -estado: EstadoPagamento \n 
        -valorTotal: double \n 
        +setEstado(e: EstadoPagamento): void \n 
        +processarPagamento(): boolean 
        }
    interface EstadoPagamento { 
        +lidarPagamento(contexto: ContextoPagamento): boolean 
    }
    class PagamentoPendente implements EstadoPagamento
    class PagamentoAprovado implements EstadoPagamento
    class PagamentoRecusado implements EstadoPagamento
}

' ------------------------------
' Descontos (Decorator)
' ------------------------------
package "Descontos" {
    interface Desconto { 
        +aplicarDesconto(preco: double): double 
    }
    class PrecoBase implements Desconto
    class DescontoConvenio extends PrecoBase
    class DescontoIdoso extends PrecoBase
    class DescontoOutubroRosa extends PrecoBase
}

' ------------------------------
' Notificações (Observer)
' ------------------------------
package "Notificações" {
    interface ObservadorNotificacao { 
        +atualizar(paciente: Paciente, mensagem: String): void 
    }
    class AssuntoNotificacao { 
        -observadores: List<ObservadorNotificacao> \n 
        +adicionarObservador(...): void \n 
        +notificarObservadores(...): void 
    }
    class NotificadorEmail implements ObservadorNotificacao
    class NotificadorSms implements ObservadorNotificacao
    class NotificadorTelegram implements ObservadorNotificacao
}

' ------------------------------
' Facade / Orquestração
' ------------------------------
package "Facade" {
    class SistemaDiagnosticoFacade <<Facade>> { 
        -validador: ValidadorExame \n 
        -fila: FilaPrioridade \n -emissor: EmissorLaudo \n 
        -assunto: AssuntoNotificacao \n 
        -pagamento: Pagamento \n 
        +processar(exame: Exame, aplicarOutubroRosa: boolean): File 
    }

    class ResultadoValidacao { 
        -sucesso: boolean \n -conteudo: String 
    }

    class EmissorLaudo { 
        -PASTA_LAUDOS: String \n 
        +gerarArquivosLaudo(exame: Exame, conteudo: String): File 
    }

    SistemaDiagnosticoFacade .right.> FilaPrioridade
    SistemaDiagnosticoFacade .right.> AssuntoNotificacao
    SistemaDiagnosticoFacade .right.> EmissorLaudo
    SistemaDiagnosticoFacade .right.> ValidadorExame
    SistemaDiagnosticoFacade .right.> Pagamento
}

' ------------------------------
' Aplicação cliente
' ------------------------------
package "Aplicação Cliente" {
    class AplicacaoPrincipal <<Client>> { 
        -sistemaDiagnosticoFacade: SistemaDiagnosticoFacade \n 
        +main(): void }
    AplicacaoPrincipal .down.> SistemaDiagnosticoFacade
}

' Relações gerais
Exame --> Paciente
Exame --> Medico : solicitante
LaudoConcreto --> FormatoLaudo
PDFGeneratorAdapter ..|> FormatoLaudo
PDFService ..|> PDFGenerator

note bottom
  Resumo:
  - `EmissorLaudo` orquestra validação, fila, pagamento, geração (TXT/HTML/PDF) e notificação.
  - `FormatoPDF` pode ser implementado diretamente ou via `PDFGeneratorAdapter` (PDFBox).
  - `FormatoHTML` tenta embutir logo como data URI para compatibilidade.
end note

@enduml