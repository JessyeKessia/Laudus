@startuml
!theme plain
skinparam classAttributeIconStyle public private
hide empty members

' 0. Entidades de Domínio Básicas
package "Entidades de Domínio" {
    class Paciente {
        +nome: String
        +convenio: String
    }

    class Medico {
        +nome: String
        +crm: String
    }

    enum TipoPrioridade {
        URGENTE
        POUCO_URGENTE
        ROTINA
    }
}

' 1. Bridge Pattern: Exame e Formatação de Laudo
package "Padrão Bridge: Laudo" {
    interface FormatoLaudo {
        +gerar(conteudoLaudo: String): String
    }

    class FormatoLaudoTexto implements FormatoLaudo { 
        +gerar(conteudoLaudo: String): String
    }
    class FormatoLaudoHtml implements FormatoLaudo { 
        +gerar(conteudoLaudo: String): String
    }
    class FormatoLaudoPdf implements FormatoLaudo { 
        +gerar(conteudoLaudo: String): String
    }

    class Laudo {
        +conteudo: String
        +cabecalho: String
        +corpo: String
        +rodape: String
        +idExame: String
        +formato: FormatoLaudo
    }

    abstract class Exame {
        +idExame: String
        +paciente: Paciente
        +medicoSolicitante: Medico
        +medicoResponsavel: Medico
        +dataExame: Date
        +precoBase: double
        +prioridade: TipoPrioridade
        +formatoLaudo: FormatoLaudo
        -primeiroValidador: ValidadorExame
        -ultimoValidador: ValidadorExame
        +adicionarRegraValidacao(regra: ValidadorExame): void
        +validar(): boolean
        +calcularPreco(): double
        +setFormatoLaudo(formato: FormatoLaudo): void
        +laudo: Laudo
    }

    class Hemograma extends Exame 
    class Ultrassonografia extends Exame
    class RessonanciaMagnetica extends Exame

    Exame "1" o-- "1" FormatoLaudo
    Exame "1" *-- "1" Laudo : gera >>
    Laudo --> Paciente
    Laudo --> Medico : solicitante
    Laudo --> Medico : responsável
    Laudo --> FormatoLaudo
}

' 2. Chain of Responsibility: Validação de Exames
package "Padrão Chain of Responsibility: Validação" {
    interface ValidadorExame {
        +setProximo(proximo: ValidadorExame): ValidadorExame
        +validar(exame: Exame): boolean
    }

    abstract class ValidadorBase implements ValidadorExame {
        -proximo: ValidadorExame
        +setProximo(proximo: ValidadorExame): ValidadorExame
        +validar(exame: Exame): boolean
    }

    class ValidadorHemograma extends ValidadorBase
    class ValidadorImplantes extends ValidadorBase

    ValidadorBase "1" o-- "0..1" ValidadorExame
}

' 3. Observer Pattern: Notificações
package "Padrão Observer: Notificações" {
    interface ObservadorNotificacao {
        +atualizar(paciente: Paciente, mensagem: String): void
    }

    class AssuntoNotificacao {
        -observadores: List<ObservadorNotificacao>
        +adicionarObservador(observador: ObservadorNotificacao): void
        +removerObservador(observador: ObservadorNotificacao): void
        +notificarObservadores(paciente: Paciente, mensagem: String): void
    }

    class NotificadorWhatsapp implements ObservadorNotificacao
    class NotificadorSms implements ObservadorNotificacao
    class NotificadorEmail implements ObservadorNotificacao

    class FachadaNotificacaoComunicacao <<Facade>> {
        +enviarWhatsapp(paciente: Paciente, mensagem: String): void
        +enviarSMS(paciente: Paciente, mensagem: String): void
        +enviarEmail(paciente: Paciente, mensagem: String): void
    }

    AssuntoNotificacao "1" o-- "0..*" ObservadorNotificacao
    NotificadorWhatsapp .right.> FachadaNotificacaoComunicacao
    NotificadorSms .right.> FachadaNotificacaoComunicacao
    NotificadorEmail .right.> FachadaNotificacaoComunicacao
}

' 4. Decorator Pattern: Descontos
package "Padrão Decorator: Descontos" {
    interface Desconto {
        +aplicarDesconto(originalPrice: double): double
    }

    class PrecoBase implements Desconto
    class DescontoConvenio extends PrecoBase
    class DescontoIdoso extends PrecoBase
    class DescontoOutubroRosa extends PrecoBase
}

' 5. Strategy Pattern: Prioridade de Exames
package "Padrão Strategy: Prioridade de Exames" {
    class FilaDePrioridade {
        +adicionarExame(exame: Exame): void
        +proximoExame(): Exame
    }

    interface EstrategiaPrioridade {
        +determinarPrioridade(exame: Exame): int
    }

    class EstrategiaPrioridadeUrgente implements EstrategiaPrioridade
    class EstrategiaPrioridadePoucoUrgente implements EstrategiaPrioridade
    class EstrategiaPrioridadeRotina implements EstrategiaPrioridade

    FilaDePrioridade "1" o-- "1" EstrategiaPrioridade
}

' 6. State Pattern: Pagamento
package "Padrão State: Pagamento" {
    class ContextoPagamento {
        -estado: EstadoPagamento
        -valorTotal: double
        +setEstado(estado: EstadoPagamento): void
        +processarPagamento(): boolean
        +aplicarDescontos(descontosAplicar: List<Desconto>): void
    }

    interface EstadoPagamento {
        +lidarPagamento(contexto: ContextoPagamento): boolean
    }

    class PagamentoPendente implements EstadoPagamento
    class PagamentoAprovado implements EstadoPagamento
    class PagamentoRecusado implements EstadoPagamento

    ContextoPagamento "1" *-- "1" EstadoPagamento
    ContextoPagamento "1" o-- "0..*" Desconto
}

' 7. Facade Pattern: Orquestração do Sistema
package "Padrão Facade: Sistema Diagnóstico" {
    class SistemaDiagnosticoFacade <<Facade>> {
        -pacientes: List<Paciente>
        -medicos: List<Medico>
        -filaDePrioridade: FilaDePrioridade
        -assuntoNotificacao: AssuntoNotificacao
        -fachadaNotificacaoComunicacao: FachadaNotificacaoComunicacao
        -contextoPagamento: ContextoPagamento
        +registrarNovoExame(...): Exame
        +processarProximoExameNaFila(): void
        +gerarLaudoEValidar(exame: Exame): String
        +processarPagamentoExame(...): boolean
        +notificarPaciente(...): void
    }

    SistemaDiagnosticoFacade .right.> FilaDePrioridade
    SistemaDiagnosticoFacade .right.> AssuntoNotificacao
    SistemaDiagnosticoFacade .right.> FachadaNotificacaoComunicacao
    SistemaDiagnosticoFacade .right.> ContextoPagamento
}

' 8. Cliente Principal
package "Aplicação Cliente" {
    class AplicacaoPrincipal <<Client>> {
        -sistemaDiagnosticoFacade: SistemaDiagnosticoFacade
        +main(): void
    }

    AplicacaoPrincipal .down.> SistemaDiagnosticoFacade
}

' Conexões gerais
Exame .up.> Paciente
Exame .up.> Medico
Exame .up.> ValidadorExame
FilaDePrioridade "1" o-- "0..*" Exame
@enduml